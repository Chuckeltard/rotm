var SimpleSpawner = Object.extend({	behavior: "none",	delay: 5,	triggerDirection: "left",	triggerDistance: 800,	totalSpawns: 1000,	travelDirection: "left",	init: function (x, y, settings) {		if (settings) {			if (settings.behavior) {				this.behavior = settings.behavior;			}			if (settings.delay) {				this.delay = settings.delay;			}			if (settings.triggerDirection)			{				this.triggerDirection = settings.triggerDirection;			}			if (settings.triggerDistance)			{				this.triggerDistance = settings.triggerDistance;			}			if (settings.totalSpawns)			{				this.totalSpawns = settings.totalSpawns;				this.totalSpawnsCounter = this.totalSpawns;			}			else			{				this.totalSpawnsCounter = this.totalSpawns;				}			if (settings.travelDirection)			{				this.travelDirection = settings.travelDirection;			}		}		this.alwaysUpdate = true;        this.startX = x;        this.startY = y;        this.playerloc = null;        this.timer = this.delay;    },    update: function () {		if (this.playerloc === null) {			this.playerloc = me.game.getEntityByName("mainPlayer")[0];		}				this.locDiff = this.playerloc.pos.x - this.startX;				if (this.locDiff <= 0)		{			this.playerloc_direction = "left";		}		else		{			this.playerloc_direction = "right";		}				this.timer +=  me.timer.tick / me.sys.fps;		if (this.timer >= this.delay) {			this.timer = 0;			this.createSimple();		}			return false;    },	shouldCreate: function () {			if (this.triggerDirection == "both")		{			if (this.locDiff >= -this.triggerDistance && this.locDiff <= this.triggerDistance)			{							}			else			{				return false;			}		}		else if (this.playerloc_direction == this.triggerDirection)		{			if (this.triggerDirection == "left")			{				if (this.locDiff >= -this.triggerDistance && this.locDiff <= 0)				{				}				else				{					return false;				}			}			else if (this.triggerDirection == "right")			{				if (this.locDiff <= this.triggerDistance && this.locDiff >= 0)				{				}				else				{					return false				}			}		}		else		{			return false;		}				if (this.totalSpawnsCounter > 0)		{			this.totalSpawnsCounter--;		}		else		{			return false;		}		return true;    },			createSimple: function () {		if (!this.shouldCreate()) {			return;		}				var simple = this.createSpecificSimple(this.startX, this.startY);		me.game.add(simple, this.z);		me.game.sort.defer();    },});var zombie_Spawner = SimpleSpawner.extend({	createSpecificSimple: function (x, y) {		return new EnemyEntity_zombie(x, y, this.behavior);	},});var mummy_Spawner = SimpleSpawner.extend({	createSpecificSimple: function (x, y) {		return new EnemyEntity_mummy(x, y, this.behavior);	},});var skeleton_Spawner = SimpleSpawner.extend({	createSpecificSimple: function (x, y) {		return new EnemyEntity_skeleton(x, y, this.behavior);    },});var skeleton_ranged_Spawner = SimpleSpawner.extend({	createSpecificSimple: function (x, y) {		return new EnemyEntity_skeleton_ranged(x, y, this.behavior);    },});var vampire_Spawner = SimpleSpawner.extend({	createSpecificSimple: function (x, y) {		return new EnemyEntity_vampire(x, y, this.behavior);	},});var ghost_Spawner = SimpleSpawner.extend({	createSpecificSimple: function (x, y) {		return new EnemyEntity_ghost(x, y, {behavior: this.behavior, travelDirection: this.travelDirection});    },});var ghost_angry_Spawner = SimpleSpawner.extend({	createSpecificSimple: function (x, y) {		return new EnemyEntity_ghost_angry(x, y, this.behavior,this.travelDirection);    },});var bat_Spawner = SimpleSpawner.extend({	createSpecificSimple: function (x, y) {		return new EnemyEntity_bat(x, y, this.behavior,this.travelDirection);    },});var liche_Spawner = SimpleSpawner.extend({	createSpecificSimple: function (x, y) {		return new EnemyEntity_liche(x, y, this.behavior,this.travelDirection);    },});var rain_front_AmbientSpawner = SimpleSpawner.extend({	delay: .5,	triggerDirection: "both",		createSpecificSimple: function (x, y) {		if (rainSFX == "on")		{			me.audio.play("rain_01",true,null,default_sfx_volume);			rainSFX = "off";		}					return new rain_front(x, y, this.behavior);			},});var rain_back_AmbientSpawner = SimpleSpawner.extend({	delay: 0.5,	triggerDirection: "both",	createSpecificSimple: function (x, y) {		return new rain_back(x, y, this.behavior);    },});var cloud_AmbientSpawner = SimpleSpawner.extend({	createSpecificSimple: function (x, y) {		return new clouds(x, y, this.behavior);    },});var smoke_AmbientSpawner = SimpleSpawner.extend({    delay:0.3,    triggerDirection: "both",	triggerDistance: 800,            createSpecificSimple: function (x, y) {		return new smoke(x, y, this.behavior);    },});